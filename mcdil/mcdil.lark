// For detailed semantics, please have a look at comments and the official wiki.
// ----------------------------------------------------------------------------
// Imports

%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_INT       -> INT32
%import common.SIGNED_FLOAT     -> FLOAT
%import common.CNAME            -> IDENTIFIER
%import common.CPP_COMMENT
%import common.C_COMMENT

%import common.WS
%ignore WS

// ----------------------------------------------------------------------------
// Primitives

?comment: CPP_COMMENT | C_COMMENT

namespaced_identifier.-2:         IDENTIFIER ( "::" IDENTIFIER )*
                                | "this"

literal:          INT32         -> int32
                | FLOAT         -> float
                | "true"        -> true
                | "false"       -> false
                | STRING        -> string
                | selector_literal

?type_qualifier:  "immutable"   -> immutable

?builtin_type_lv0:        "int"         -> int32_type
                        | "bool"        -> bool_type

?builtin_type_lv1:        "float"       -> float_type
                        | "null"        -> null_type

?builtin_type_lv2:        "string"        -> string_type
                        | "deque"       -> deque_type
                        | "selector"    -> selector_type
                        | "D3"          -> location_type
                        | "R2"          -> rotation_type
                        | "map"         -> map_type

?builtin_type: builtin_type_lv0 | builtin_type_lv1 | builtin_type_lv2

any_type: (((builtin_type | namespaced_identifier) generic_definition?) | "auto") ("[" INT32 "]")* "&"?

qualified_type: type_qualifier? any_type

public_qualifier: "export"

// ----------------------------------------------------------------------------
// Minecraft Specific Terms

single_coordinate: namespaced_identifier | INT32 | FLOAT        // Constants only

location_literal: "(" "D3" ";" single_coordinate "," single_coordinate "," single_coordinate ","? ")"

rotation_literal: "(" "R2" ";" single_coordinate "," single_coordinate ","? ")"

selector_literal: /\@[parse]/

// ----------------------------------------------------------------------------
// Common Statements

program: code_unit+

?code_unit: (statement ";") | comment

?statement: simple_statement | command_statement | compound_statement

?simple_statement:    initialization
                    | assignable_statement
                    | sleep_statement
                    | escape_statement
                    | alias_statement
                    | author_statement

?compound_statement:  function_definition
                    | while_loop
                    | execute_loop
                    | branch
                    | namespace
                    | struct_definition
                    | enum_definition

// ----------------------------------------------------------------------------
// Simple Statements

variable_definition: public_qualifier? qualified_type IDENTIFIER        // Some parent statements cannot use some of qualifiers from here

initialization:   variable_definition "=" assignable_statement                          -> init_with_alter
                | variable_definition "(" parameter_pass ")"                            -> init_with_ctor       // Custom struct constructor is only allowed

assignable_statement.-1:  namespaced_identifier alter_operator assignable_statement                                         -> alter_statement
                        | namespaced_identifier "><" namespaced_identifier                                                  -> swap_statement
                        | assignable_statement "[" assignable_statement ("," assignable_statement)* "]"                     -> indexing_statement
                        | namespaced_identifier
                        | literal
                        | call_statement
                        | assignable_statement "." IDENTIFIER                                                               -> property_access_statement
                        | "(" assignable_statement "?" assignable_statement ":" assignable_statement ")"                    -> ternary_statement
                        | unary_operator assignable_statement                                                               -> unary_statement
                        | assignable_statement binary_operator assignable_statement                                         -> binary_statement
                        | deque_init
                        | map_init

deque_init_internal: assignable_statement ("," assignable_statement)* ","?

deque_init: "[" deque_init_internal? "]"

map_init_single: assignable_statement "->" assignable_statement

map_init_internal: map_init_single ("," map_init_single)* ","?

map_init: "[" map_init_internal? "]"

parameter_pass_single: IDENTIFIER "=" assignable_statement

parameter_pass: parameter_pass_single ("," parameter_pass_single)* ","?

call_statement: (assignable_statement | any_type) "(" parameter_pass ")"

?unary_operator:          "+"   -> op_pos
                        | "-"   -> op_neg
                        | "!"   -> op_not

?binary_operator:     "+"   -> op_add
                    | "-"   -> op_sub
                    | "*"   -> op_mul
                    | "/"   -> op_div
                    | "%"   -> op_mod
                    | "**"  -> op_pow
                    | "=="  -> op_eq
                    | "!="  -> op_ne
                    | "<"   -> op_lt
                    | "<="  -> op_le
                    | ">"   -> op_gt
                    | ">="  -> op_ge
                    | "&"   -> op_and
                    | "|"   -> op_or
                    | "^"   -> op_xor

sleep_statement: "sleep" "(" ("tick" | "sec" | "day") "=" assignable_statement ")"

?alter_operator:  "="   -> assign_op
                | "+="  -> assign_op_add
                | "-="  -> assign_op_sub
                | "*="  -> assign_op_mul
                | "/="  -> assign_op_div
                | "%="  -> assign_op_mod

escape_statement:     "return" assignable_statement?    -> return_statement
                    | "continue"                        -> continue_statement
                    | "break"                           -> break_statement

alias_statement: public_qualifier? "alias" IDENTIFIER "=" (namespaced_identifier | any_type)

author_statement: "author" STRING STRING        // username, email

// ----------------------------------------------------------------------------
// Direct Commands

?command_statement: raw_command

raw_command: "raw" STRING

// ----------------------------------------------------------------------------
// Basic Compound Statements

general_block:    "{" code_unit* "}"                                    -> general_block_defined
                | ":" namespaced_identifier "(" parameter_pass ")"      -> general_block_delegated      // Some compounds like namespace cannot use this delegated block
                | "=" "?"                                               -> general_block_abstracted

function_parameters: variable_definition ("," variable_definition)* ","?

function_head: public_qualifier? "function" IDENTIFIER generic_definition? "(" function_parameters ")" "->" any_type

function_definition: function_head general_block

while_loop: "while" "(" assignable_statement ")" general_block

if_condition:     "(" assignable_statement ")"                                          -> if_condition_typical
                | "enum" "(" assignable_statement "->" IDENTIFIER ";" IDENTIFIER ")"    -> if_condition_enum    // enum(cond -> id1; id2) -> If cond == enum id1, then run for id2 variable

if_block: "if" if_condition general_block

else_block: "else" general_block

branch: if_block ("else" if_block)* else_block?

importing: "=" "import" STRING

namespace: public_qualifier? "namespace" namespaced_identifier (general_block | importing)

// ----------------------------------------------------------------------------
// Execute

execute_condition:        "as" (namespaced_identifier | selector_literal)                                               -> execute_condition_as
                        | "at" (namespaced_identifier | selector_literal)                                               -> execute_condition_at
                        | "facing" (namespaced_identifier | selector_literal)                                           -> execute_condition_facing
                        | "in" STRING                                                                                   -> execute_condition_dimension
                        | "on" ("attacker" | "controller" | "leasher" | "origin" | "passengers" | "target" | "vehicle") -> execute_condition_on
                        | "positioned" (namespaced_identifier | selector_literal)                                       -> execute_condition_positioned
                        | "rotated" (namespaced_identifier | selector_literal)                                          -> execute_condition_rotated

execute_loop: "execute" "(" execute_condition (";" execute_condition)* ";"? ")" general_block

// ----------------------------------------------------------------------------
// Struct

struct_direct_initializer_single: IDENTIFIER "(" assignable_statement ")"

struct_method_body:       general_block                                                                         -> struct_method_body_default
                        | ":" struct_direct_initializer_single ("," struct_direct_initializer_single)*          -> struct_initializer_body_direct

struct_method_definition: function_head struct_method_body

struct_property_definition: variable_definition ("=" assignable_statement)?

struct_inheritance: ":" namespaced_identifier ("," namespaced_identifier)*

struct_definition: public_qualifier? "struct" IDENTIFIER generic_definition? struct_inheritance? "{" ((struct_property_definition | struct_method_definition) ";")* "}"

// ----------------------------------------------------------------------------
// Enum

enum_member: IDENTIFIER ("(" any_type ")")?

enum_definition: public_qualifier? "enum" IDENTIFIER "{" (enum_member ";")+ "}"

// ----------------------------------------------------------------------------
// Generic

generic_definition_arg: ("typename" | builtin_type_lv0 | "typemap") IDENTIFIER ("=" (any_type | assignable_statement))?

generic_definition: "<" generic_definition_arg ("," generic_definition_arg)* ","? ">"
