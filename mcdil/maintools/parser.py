from pathlib import Path

from lark import Lark, ParseTree

from .reader import read

_global_mcdil_parser: Lark | None = None


def load_grammar(path: Path | None = None, start: str = "program") -> Lark:
    """
    Load grammar, if it is not ready.
    """
    global _global_mcdil_parser
    if _global_mcdil_parser is not None:
        return _global_mcdil_parser
    path = path or (Path(__file__).absolute().parent.parent / "mcdil.lark")
    with open(path, "r") as grammar_file:
        _global_mcdil_parser = Lark(
            grammar_file.read(),
            start=start,
            debug=True,
            propagate_positions=True,
        )
        return _global_mcdil_parser


def parse(code: str) -> ParseTree:
    """
    Parse the code with the lexer generated by `Lark`.
    This does not recursively parse imported codes
    from external locations like other files or network.
    """
    parsed_tree = load_grammar().parse(code)
    return parsed_tree


if __name__ == "__main__":
    print(parse(read("examples/simple/test2.mcdil")[0]).pretty())
