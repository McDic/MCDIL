"""
This module provides an high level interface for datapack.
"""

import json
import re
import shutil
import typing
from pathlib import Path

from .utils import DefaultMinecraftVersion, Version


class Datapack:
    """
    Main interface for a standalone datapack.
    Datapack for snapshot is not supported yet.
    Currently, this library generates only one namespace under the datapack.
    """

    MINIMUM_MC_VERSIONS: typing.Final[dict[int, Version]] = {
        4: Version(1, 13),
        5: Version(1, 15),
        6: Version(1, 16, 2),
        7: Version(1, 17),
        8: Version(1, 18),
        9: Version(1, 18, 2),
        10: Version(1, 19),
        12: Version(1, 19, 4),
        15: Version(1, 20),
        18: Version(1, 20, 2),
    }

    def __init__(
        self,
        namespace: str,
        description: typing.Optional[str] = None,
        minecraft_version: Version = DefaultMinecraftVersion,
    ):
        if not re.fullmatch("[A-Za-z0-9_]+", namespace):
            raise ValueError("Invalid namespace %s" % (namespace,))
        self._namespace: str = namespace
        self._description: typing.Optional[str] = description
        for datapack_version, required_minecraft_version in sorted(
            self.MINIMUM_MC_VERSIONS.items(), reverse=True
        ):
            if required_minecraft_version <= minecraft_version:
                self._pack_format: int = datapack_version
                break
        else:
            raise ValueError(
                "Given MC version %s is invalid or too low" % (minecraft_version,)
            )

    def generate(self, root_path: typing.Union[Path, str], overwrite: bool = False):
        """
        Generate a datapack on given `root_path`.
        """
        raise NotImplementedError

        root_path = Path(root_path)
        if root_path.exists():
            if not overwrite:
                raise FileExistsError
            shutil.rmtree(str(root_path.absolute()))
        root_path.mkdir()

        with open(root_path / "pack.mcmeta") as pack_mcmeta_file:
            json.dump(
                {
                    "pack": {
                        "description": self._description
                        or "Datapack generated by MCDPPY",
                        "pack_format": self._pack_format,
                    }
                },
                pack_mcmeta_file,
            )

        (root_path / "data").mkdir()
        main_namespace_path = root_path / "data" / self._namespace
        main_namespace_path.mkdir()
